pipeline {
    agent any
    tools {
             terraform 'terraform'
    }

    environment {
        registry= "queeki/dockerhubrepo"
        AWS_DEFAULT_REGION = "us-east-1"
        DOCKERHUB_PASSWORD = credentials('DOCKERHUB_PASSWORD')
        registryCredential = 'dockerhub-creds'

    }
    stages {
        stage('Git Checkout'){
            steps{
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/QIhunwoKingsley/Queen-Evolve-Exercise.git']])
            }
        }
        stage('Initalizing Terraform code'){
            steps{
                    sh '''
                    cd Terraform-Files
                    terraform init
                    '''
            }
        }
        stage('Format and Validate Terraform code'){
            steps{
                    sh '''
                    cd Terraform-Files
                    terraform fmt
                    terraform validate
                    '''
            }
        }
        stage('Terraform Apply'){
            steps{
                    sh '''
                    cd Terraform-Files

                    terraform apply -auto-approve
                    '''
                }
        }
        stage('Unit Test maven'){
         
         when { expression {  params.action == 'create' } }

            steps{
               script{
                   
                   mvnTest()
               }
            }
        }
         stage('Integration Test maven'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   mvnIntegrationTest()
               }
            }
        }
        stage('Static code analysis: Sonarqube'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   def SonarQubecredentialsId = 'sonarqube-api'
                   statiCodeAnalysis(SonarQubecredentialsId)
               }
            }
       }
       stage('Quality Gate Status Check : Sonarqube'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   def SonarQubecredentialsId = 'sonarqube-api'
                   QualityGateStatus(SonarQubecredentialsId)
               }
            }
       }
        stage('Maven Build : maven'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   mvnBuild()
               }
            }
        }
        stage('Build Docker Image') {
            steps{
                script {
                      dockerImage = docker.build registry + ":$BUILD_NUMBER"
                    }
            }
        }
        stage('Docker Image Scan: trivy '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImageScan("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
               }
            }
        }
        stage('Push Docker Image to Docker Hub') {
            steps {
                    script {
                        docker.withRegistry( '', registryCredential ) {
                        dockerImage.push()
                        }
                }
            }
        }
        stage('Deploying Python Application') {
            steps{
                script{
                    dir('python-app-chart') {
                        sh 'aws eks update-kubeconfig --name my-eks-cluster'
                        sh "helm upgrade --install my-python-app . --set image.tag=${BUILD_NUMBER}"
                    }
                }
            }
        }
    }
}